@page "/"
@rendermode InteractiveServer

<MudDialogProvider/>
<MudContainer Class="d-flex justify-center mb-2">
  <MudFab Color="Color.Primary"
          StartIcon="@Icons.Material.Filled.Add"
          Size="Size.Large"
          IconSize="Size.Large"
          Label="Incluir Bolo"
          Class="ma-2"
          @onclick="(e => CreateAsync())" />
</MudContainer>

<MudGrid Justify="Justify.Center" class="pr-4 pl-4">

  @foreach (var bolo in bolos)
  {
    <MudItem xs="2">
      <MudCard>
        <MudCardHeader>
          <CardHeaderContent>
            <MudText Typo="Typo.body1">@bolo.Name</MudText>
            <MudText Typo="Typo.h6">R$ @bolo.Price </MudText>
          </CardHeaderContent>
        </MudCardHeader>
        <MudCardMedia Image="@bolo.ImageUrl" width="100" Height="200" />
        <MudCardContent>
          <MudText Typo="Typo.body2">@bolo.Description</MudText>
        </MudCardContent>
        <MudCardActions>
          <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" @onclick="(e => UpdateAsync(bolo.Id))" />
          <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" @onclick="(e => DeleteAsync(bolo.Id))" />
        </MudCardActions>
      </MudCard>
    </MudItem>
  }
</MudGrid>


@code {
  List<Cake> bolos = new List<Cake>();

  protected override async Task OnInitializedAsync()
  {
    bolos = await _context.Cakes.ToListAsync();
  }

  private async Task CreateAsync()
  {
    var parameters = new DialogParameters();
    parameters.Add("Bolo", new Cake());

    var dialog = _dialogService.Show<GerenciaBolosDialog>("Incluir", parameters);
    var result = await dialog.Result;

    if (!result.Canceled)
    {
      Cake? novoBolo = result.Data as Cake;
      _context.Cakes.Add(novoBolo!);
      await _context.SaveChangesAsync();
      bolos.Insert(0, novoBolo!);
      StateHasChanged();
    }
  }

  private async Task UpdateAsync(int id)
  {
    var parameters = new DialogParameters();
    var boloAtualizar = bolos.FirstOrDefault(_ => _.Id == id);
    parameters.Add("Bolo", boloAtualizar);

    var dialog = _dialogService.Show<GerenciaBolosDialog>("Atualizar", parameters);
    var result = await dialog.Result;

    if (!result.Canceled)
    {
      var boloAtualizado = result.Data as Cake;
      _context.Cakes.Update(boloAtualizado!);
      await _context.SaveChangesAsync();

      bolos.Remove(boloAtualizar!);
      bolos.Insert(0, boloAtualizado!);
      StateHasChanged();
    }
  }

  private async Task DeleteAsync(int id)
  {
    bool? result = await _dialogService.ShowMessageBox(
        "Confirma exclusão",
        "A exclusão não pode ser desfeita!",
        yesText: "Deleta", cancelText: "Cancela");

    if (result ?? false)
    {
      var boloRemover = await _context.Cakes.FindAsync(id);
      _context.Cakes.Remove(boloRemover!);
      await _context.SaveChangesAsync();
      bolos.Remove(boloRemover!);
      StateHasChanged();
    }
  }
}
